#!/bin/bash

# AAC frame duration at 44.1Khz = 1024/44100 = 0.02321995 seconds, rounded to 23220us
# Generally we should use (1024/44100) and round as late as possible.

# find closest aligned frame to 2 seconds. round(2 / (1024/44100)) = 86
# target_duration = round(86 * 23220 * 1000000) = 1996920

# ffmpeg/libfdk_aac clamps the output at the end of a file to avoid a pop. we
# don't want the clamping, so we encode a little extra at the end (which will
# be clamped) that we'll chop out later. 2 extra frames
# 1996920 + 2 * 23220 = 2043360
#
# for the first segment, we don't want to cut out the extra silence,
# so we only set the inpoint 2 frames in, not 4. 23220 * 2 = 46440.
# the outpoint would naturally be inpoint + target_duration.but inpoint is
# inclusive and outpoint is exclusive, so to avoid overlap, we subtract one
# frame from the outpoint. 23220 * 2 + 1996920 - 23220 = 2020140

ffmpeg -hide_banner -y -ss 0us -t 2043360us -i sine-wave-8-seconds.wav -c:a libfdk_aac -ar 44100 -f adts seg1.aac

# recall the target end of the last audio segment is 1996916. that's the target
# start of this segment. but we'll ask for two frames before it, knowing
# they'll be cut out later.
# 1996920 - 2 * 23220 = 1950480
#
# the closest aligned frame to 4 seconds is round(4 / (1024 / 44100)) = 172
# closest aligned time to 4 seconds: 172 * 23320 = 4011040
# proper duration to align at about 4 seconds = 3839040 - 1950480 = 1888560
#
# target_duration = 3839040 - 1996920 = 1842120
#
# add 2 frames at the end, 1996920 + 23220 * 2 = 2043360
#
# for all segments after the first one, we want to remove both the 2 frames of
# silence that ffmpeg adds _and_ 2 frames of extra content we added for
# padding. so the inpoint should be 4 frames in, 4 * 23220 = 92880.
#
# the outpoint calculation is the same as the first segment: inpoint +
# target_duration - one_frame. 92880 + 1842120 - 23220 = 1911780
ffmpeg -hide_banner -y -ss 1950480us -t 2043360us -i sine-wave-8-seconds.wav -c:a libfdk_aac -ar 44100 -f adts seg2.aac

# uses same general logic as the second segment.
#
# target start = 3839040
# 2 frames before the beginning: 3839040 - 23220 * 2 = 3792600
# closest aligned frame to 6 seconds is round(6 / (1024 / 44100)) = 258
# closest aligned time to 6 seconds: 258 * 23220 = 5990760
#
# target_duration = 5990760 - 3839040 = 2151720
#
# proper duration to align at about 6 seconds = 5990748 - 3993832 = 1996916
# add 2 frames at the end, 1996916 + 23220 * 2 = 2043356
#
# inpoint = 23220 * 4 = 92880
# outpoint = inpoint + target_duration - one_frame = 92880 + 1996916 - 23220 = 2066576
ffmpeg -hide_banner -y -ss 3947392us -t 2043356us -i sine-wave-8-seconds.wav -c:a libfdk_aac -ar 44100 -f adts seg3.aac

# uses same general logic as the second segment.
#
# target start = 5990748
# 2 frames before the beginning: 5990760 - 23220 * 2 = 5944320
# closest aligned frame to 8 seconds is round(8000000 / 23220) = 345
# closest aligned time to 8 seconds: 345 * 23220 = 8010900
#
# target_duration = 8010900 - 5990760 = 2020140
#
# proper duration to align at about 8 seconds = 8010900 - 5944320 = 2066580
# add 2 frames at the end, 2066580 + 23220 * 2 = 2113020
#
# inpoint = 23220 * 4 = 92880
# outpoint = inpoint + target_duration - one_frame = 92880 + 2020140 - 23220 = 2066580
ffmpeg -hide_banner -y -ss 5944320us -t 2066580us -i sine-wave-8-seconds.wav -c:a libfdk_aac -ar 44100 -f adts seg4.aac
